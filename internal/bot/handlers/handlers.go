package handlers

import (
	"bufio"
	"context"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"github.com/NOSTRADA88/telegram-bot-go/internal/models"
	"github.com/PaulSonOfLars/gotgbot/v2"
	"github.com/PaulSonOfLars/gotgbot/v2/ext"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"
)

const (
	html     = "html"
	dataJSON = "data.json"
)

func (c *Client) startHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	state, err := c.FSM.GetState(context.Background(), ctx.EffectiveUser.Id)

	if err != nil {
		return err
	}

	switch state {

	case "":

		if err = c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, start); err != nil {
			return err
		}

		_, err = bot.SendMessage(ctx.EffectiveChat.Id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –±–∏–ª–µ—Ç/–ø–æ—á—Ç—É/–§–ò–û (–æ–¥–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä). –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ üë§\n\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç üòä", nil)

	case uploadSchedule:

		if err = c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, menu); err != nil {
			return err
		}

		_, err = bot.SendMessage(ctx.Message.Chat.Id,
			"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, —Å–∫—É—à–∞–π—Ç–µ –ø–µ—á–µ–Ω—å–∫—É!",
			&gotgbot.SendMessageOpts{
				ParseMode:   html,
				ReplyMarkup: mainMenuAdminKB(),
			})

		if err != nil {
			return err
		}

	case updateIdentification:

		err = c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, menu)

		if err != nil {
			return err
		}

		user, errS := c.Database.SelectUser(c.Database.Collection("user"), int(ctx.EffectiveUser.Id))

		if errS != nil {
			return errS
		}

		if _, exists := c.Cfg.Administrators.IDsInMap[int(ctx.Message.From.Id)]; exists {

			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				"–í–∏–∂—É, —á—Ç–æ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–∞—Ö. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–∞",
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuAdminKB(),
				})

			if err != nil {
				return err
			}

		} else {

			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %s, —è @%s. –í–∏–∂—É, —á—Ç–æ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã –æ –¥–æ–∫–ª–∞–¥–∞—Ö", user.Identification, bot.User.Username),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuUserKB(),
				})

			if err != nil {
				return err
			}

		}
	case start:
		if strings.HasPrefix(ctx.EffectiveMessage.Text, "/") {

			_, err = bot.SendMessage(ctx.EffectiveChat.Id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"/\". –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ... –±–∏–ª–µ—Ç... –§–ò–û –∏–ª–∏ –≤–∞—à—É –ø–æ—á—Ç—É.", nil)

			if err != nil {
				return err
			}

			return nil
		}
	default:
		err = c.FSM.SetState(context.Background(), ctx.Message.From.Id, menu)

		if err != nil {
			return err
		}

		user, errS := c.Database.SelectUser(c.Database.Collection("user"), int(ctx.EffectiveUser.Id))

		if errS != nil {
			return errS
		}

		if _, exists := c.Cfg.Administrators.IDsInMap[int(ctx.Message.From.Id)]; exists {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é %s. –í—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–∫–ª–∞–¥–æ–≤ ? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∫—Ä–∞–π–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Å—Ç—É–ø–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã!", user.Identification),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuAdminKB(),
				})

			if err != nil {
				return err
			}

		} else {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é %s. –í—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–∫–ª–∞–¥–æ–≤ ? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∫—Ä–∞–π–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Å—Ç—É–ø–∞—é—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã!", user.Identification),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuUserKB(),
				})

			if err != nil {
				return err
			}
		}
	}

	return nil

}

func (c *Client) textHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	state, err := c.FSM.GetState(context.Background(), ctx.EffectiveUser.Id)

	if err != nil {
		return err
	}

	switch state {

	case start:
		if strings.HasPrefix(ctx.EffectiveMessage.Text, "/") {

			_, errS := bot.SendMessage(ctx.EffectiveChat.Id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"/\". –í–≤–µ–¥–∏—Ç–µ, –±–∏–ª–µ—Ç, –§–ò–û –∏–ª–∏ –≤–∞—à—É –ø–æ—á—Ç—É.",
				nil)

			if errS != nil {
				return errS
			}

			return nil
		}

		coll := c.Database.Collection("user")

		err = c.Database.InsertOne(coll, models.User{
			TgID: int(ctx.EffectiveUser.Id), Identification: ctx.EffectiveMessage.Text, FavoriteReports: []models.Report{}, ChatID: int(ctx.EffectiveChat.Id)})

		if err != nil {
			return err
		}

		if err = c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, menu); err != nil {
			return err
		}

		user, errS := c.Database.SelectUser(coll, int(ctx.EffectiveUser.Id))

		if errS != nil {
			return errS
		}

		if _, exists := c.Cfg.Administrators.IDsInMap[int(ctx.Message.From.Id)]; exists {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç %s, —è @%s. –ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤–ª–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –∏ —Å–Ω–∏–ª–∞—Å—å –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞? –î–∞? –¢–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –¥–æ–∫–ª–∞–¥–∞–º–∏!", user.Identification, bot.User.Username),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuAdminKB(),
				})

			if err != nil {
				return err
			}

		} else {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å %s, —è @%s. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –¥–æ–∫–ª–∞–¥–∞–º–∏ –≤ \"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã\". –Ø —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –Ω–∞–π–¥—ë—à—å —á—Ç–æ-—Ç–æ –¥–ª—è —Å–µ–±—è. –¢–∞–∫–∂–µ –≤—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ—Å—É—â—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–ø–∫–∏ –Ω–∏–∂–µ", user.Identification, bot.User.Username),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuUserKB(),
				})

			if err != nil {
				return err
			}

		}
	case menu:
		user, errS := c.Database.SelectUser(c.Database.Collection("user"), int(ctx.EffectiveUser.Id))

		if errS != nil {
			return errS
		}

		if _, exists := c.Cfg.Administrators.IDsInMap[int(ctx.Message.From.Id)]; exists {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("%s, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? –•–æ—Ç—è –º–Ω–µ –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã... –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É", user.Identification),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuAdminKB(),
				})

			if err != nil {
				return err
			}

		} else {
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ %s. –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ ? –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ—á–∫–∏ –Ω–∏–∂–µ...", user.Identification),
				&gotgbot.SendMessageOpts{
					ParseMode:   html,
					ReplyMarkup: mainMenuUserKB(),
				})

			if err != nil {
				return err
			}

		}
	case updateIdentification:

		if strings.HasPrefix(ctx.EffectiveMessage.Text, "/") {

			_, errS := bot.SendMessage(ctx.EffectiveChat.Id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å \"/\". –í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ... –±–∏–ª–µ—Ç... –§–ò–û –∏–ª–∏ –≤–∞—à—É –ø–æ—á—Ç—É.",
				&gotgbot.SendMessageOpts{ParseMode: html, ReplyMarkup: backToMainMenuKB()})

			if errS != nil {
				return errS
			}

			return nil
		}

		coll := c.Database.Collection("user")

		ok, errU := c.Database.UpdateUserID(coll, int(ctx.EffectiveUser.Id), ctx.EffectiveMessage.Text)

		if errU != nil {
			return errU
		}

		if ok {
			user, errS := c.Database.SelectUser(coll, int(ctx.EffectiveUser.Id))
			if errS != nil {
				return errS
			}
			_, err = bot.SendMessage(ctx.Message.Chat.Id,
				fmt.Sprintf("–Ø –ø–æ–º–µ–Ω—è–ª –Ω–∞ %s. –ï—Å–ª–∏ –≤—ã —Å–Ω–æ–≤–∞ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∂–º–∏—Ç–µ \"‚¨ÖÔ∏è –ù–∞–∑–∞–¥\" –∏–ª–∏ /start", user.Identification),
				&gotgbot.SendMessageOpts{ParseMode: html, ReplyMarkup: backToMainMenuKB()})
			if err != nil {
				return err
			}
		}
	case uploadSchedule, viewReports, userEvaluations:
		_, errD := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

		if errD != nil {
			return errD
		}
	default:
		if len(strings.Split(state, ";")) == 5 && strings.Split(state, ";")[0] == evaluateReport {

			stateSeparated := strings.Split(state, ";")
			text := ctx.EffectiveMessage.Text
			evaluation := models.Evaluation{URL: stateSeparated[1], TgID: int(ctx.Message.From.Id),
				Content: stateSeparated[len(stateSeparated)-2], Performance: stateSeparated[len(stateSeparated)-1],
				Comment: text}

			if err = c.Database.InsertOne(c.Database.Collection("evaluation"), evaluation); err != nil {
				return err
			}

			_, err = bot.SendMessage(ctx.EffectiveChat.Id, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", &gotgbot.SendMessageOpts{
				ReplyMarkup: evaluationEndKB(),
				ParseMode:   html,
			})

			if err != nil {
				return err
			}
		}

		if len(strings.Split(state, ";")) == 4 && strings.Split(state, ";")[0] == updateEvaluation {

			stateSeparated := strings.Split(state, ";")

			text := ctx.EffectiveMessage.Text

			evaluation := models.Evaluation{URL: stateSeparated[1], TgID: int(ctx.Message.From.Id),
				Content: stateSeparated[2], Performance: stateSeparated[3],
				Comment: text}

			upd, err := c.Database.UpdateEvaluation(c.Database.Collection("evaluation"), int(ctx.Message.From.Id), stateSeparated[1], evaluation)

			if err != nil {
				return err
			}

			err = c.FSM.SetState(context.Background(), ctx.Message.From.Id, updateComment)

			if err != nil {
				return err
			}

			if upd {
				_, err = bot.SendMessage(ctx.EffectiveChat.Id, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", &gotgbot.SendMessageOpts{
					ReplyMarkup: evaluationEndKB(),
					ParseMode:   html,
				})
				if err != nil {
					return err
				}
			} else {
				_, err = bot.SendMessage(ctx.EffectiveChat.Id, "–í–∞—à –æ—Ç–∑—ã–≤ –Ω–∏ —á–µ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ!", &gotgbot.SendMessageOpts{
					ReplyMarkup: evaluationEndKB(),
					ParseMode:   html,
				})
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

func (c *Client) confInfoCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	err := c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, confInfo)
	if err != nil {
		return err
	}

	cb := ctx.Update.CallbackQuery

	_, _, err = cb.Message.EditText(bot, fmt.Sprintf("üìÖ –û –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n\nüéâ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\nüåê –°–∞–π—Ç: %s\n\nüïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: %s\nüïô –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n\n",
		c.Cfg.Conference.Name, c.Cfg.Conference.URL, time.Time(c.Cfg.Conference.TimeFrom).Format("02.01.2006 15:04"),
		time.Time(c.Cfg.Conference.TimeUntil).Format("02.01.2006 15:04")),
		&gotgbot.EditMessageTextOpts{ParseMode: html, ReplyMarkup: backToMainMenuKB()})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) backCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	err := c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, menu)

	if err != nil {
		return err
	}

	cb := ctx.Update.CallbackQuery

	if _, exists := c.Cfg.Administrators.IDsInMap[int(cb.From.Id)]; exists {
		_, _, err = cb.Message.EditText(bot,
			"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ö–∞–∫ —É–¥–æ–±–Ω–æ, —á—Ç–æ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ —Å—Ü–µ–Ω—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
			&gotgbot.EditMessageTextOpts{ParseMode: html, ReplyMarkup: mainMenuAdminKB()})

		if err != nil {
			return err
		}

	} else {
		_, _, err = cb.Message.EditText(bot,
			"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ö–∞–∫ —É–¥–æ–±–Ω–æ, —á—Ç–æ —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ —Å—Ü–µ–Ω—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
			&gotgbot.EditMessageTextOpts{ParseMode: html, ReplyMarkup: mainMenuUserKB()})

		if err != nil {
			return err
		}

	}

	return nil
}

func (c *Client) uploadScheduleCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	err := c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, uploadSchedule)

	if err != nil {
		return err
	}

	cb := ctx.Update.CallbackQuery

	_, _, err = cb.Message.EditText(bot, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: ", &gotgbot.EditMessageTextOpts{
		ParseMode:   html,
		ReplyMarkup: backToMainMenuKB(),
	})

	if err != nil {
		return err
	}

	return nil

}

func getFormatReports(data []models.Report) string {
	var reports string

	for ind, report := range data {
		reports += fmt.Sprintf("%v. %v –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: %v\n\n%s - %s\n\n", ind+1, report.StartTime.Format("02.01.2006"), report.StartTime.Format("15:04"), report.Speakers, report.Title)
	}

	return reports
}

func (c *Client) fileHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	state, err := c.FSM.GetState(context.Background(), ctx.EffectiveUser.Id)

	if err != nil {
		return err
	}

	switch state {

	case uploadSchedule:

		fileExtension := strings.Split(ctx.EffectiveMessage.Document.FileName, ".")[len(strings.Split(ctx.EffectiveMessage.Document.FileName, "."))-1]

		if fileExtension != "scv" {
			_, errSF := bot.SendMessage(ctx.EffectiveChat.Id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è —Ä–∞–±–æ—Ç–∞—é—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv", nil)

			if errSF != nil {
				return errSF
			}

			return fmt.Errorf("incorrect file extension: expected \"scv\" got \"%v\"", fileExtension)
		}

		file, errF := bot.GetFile(ctx.EffectiveMessage.Document.FileId, nil)

		if errF != nil {
			return errF
		}

		response, errG := http.Get(fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", c.Cfg.Telegram.Token, file.FilePath))

		if errG != nil {
			return errG
		}

		defer func() {
			if errC := response.Body.Close(); errC != nil {
			}
		}()

		scanner := bufio.NewScanner(response.Body)

		var reports []interface{}

		for scanner.Scan() {

			reader := csv.NewReader(strings.NewReader(scanner.Text()))

			reader.TrimLeadingSpace = true

			record, errR := reader.Read()

			if errR != nil {
				return errR
			}

			if len(record) != 5 {

				_, errSL := bot.SendMessage(ctx.EffectiveChat.Id, "–î–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞ 5!\n```\nStart (MSK Time Zone),Duration (min),Title,Speakers,URL\n```", nil)

				if errSL != nil {
					return errSL
				}

				return fmt.Errorf("invalid line length: excpeted 5, got %v", len(record))
			}

			t, errT := time.Parse("02/01/2006 15:04:05", record[0])

			if errT != nil {
				_, errST := bot.SendMessage(ctx.EffectiveChat.Id, "–°—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n02/01/2006 15:04:05\n\n", nil)

				if errST != nil {
					return errST
				}

				return errT
			}

			if t.Before(time.Time(c.Cfg.Conference.TimeFrom)) || time.Time(c.Cfg.Conference.TimeUntil).Before(t) {
				_, errST := bot.SendMessage(ctx.EffectiveChat.Id, fmt.Sprintf("–í—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–∞ \"%s\" –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å %s –ø–æ %s", record[2], time.Time(c.Cfg.Conference.TimeFrom).Format("02.01.2006 15:04:05"), time.Time(c.Cfg.Conference.TimeUntil).Format("02.01.2006 15:04:05")), nil)

				if errST != nil {
					return errST
				}

				return fmt.Errorf("mismatched time interval")
			}

			var duration int

			_, errS := fmt.Sscanf(record[1], "%d", &duration)

			if errS != nil {
				return errS
			}

			report := models.Report{StartTime: t, Duration: duration, Title: record[2],
				Speakers: record[3], URL: record[4]}
			reports = append(reports, report)

		}

		isUpdated, isDeleted, errM := c.Database.InsertMany(c.Database.Collection("report"), reports)

		if errM != nil {
			return errM
		}

		if isUpdated {
			var wg sync.WaitGroup
			users, errS := c.Database.SelectUsers(c.Database.Collection("user"))
			if errS != nil {
				return errS
			}
			for _, user := range users {
				if user.TgID != int(ctx.EffectiveUser.Id) {
					msg, errSM := bot.SendMessage(ctx.EffectiveChat.Id, "–î–æ–∫–ª–∞–¥—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ \"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã\"", nil)
					if errSM != nil {
						return errM
					}
					wg.Add(1)
					go func(msg *gotgbot.Message) {
						defer wg.Done()
						time.Sleep(time.Second * 3)
						_, errD := bot.DeleteMessage(msg.Chat.Id, msg.MessageId, nil)
						if errD != nil {
							return
						}
					}(msg)
				}
			}
			wg.Wait()
		}

		if isDeleted {
			var wg sync.WaitGroup
			users, errS := c.Database.SelectUsers(c.Database.Collection("user"))
			if errS != nil {
				return errS
			}
			for _, user := range users {
				if user.TgID != int(ctx.EffectiveUser.Id) {
					msg, errSM := bot.SendMessage(ctx.EffectiveChat.Id, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫–ª–∞–¥—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –¥–æ–∫–ª–∞–¥–æ–≤ –≤ \"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–∫–ª–∞–¥—ã\"", nil)
					if errSM != nil {
						return errSM
					}
					wg.Add(1)
					go func(msg *gotgbot.Message) {
						defer wg.Done()
						time.Sleep(time.Second * 3)
						_, errD := bot.DeleteMessage(msg.Chat.Id, msg.MessageId, nil)
						if errD != nil {
							return
						}
					}(msg)
				}
			}
			wg.Wait()
		}

		_, err = bot.SendMessage(ctx.EffectiveChat.Id, "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!", &gotgbot.SendMessageOpts{
			ParseMode:   html,
			ReplyMarkup: backToMainMenuAdminKB(),
		})

		if err != nil {
			return err
		}
	default:
		_, err = bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

		if err != nil {
			return err
		}
	}
	return nil

}

func (c *Client) changeIdentificationCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	err := c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, updateIdentification)

	if err != nil {
		return err
	}

	user, err := c.Database.SelectUser(c.Database.Collection("user"), int(ctx.EffectiveUser.Id))

	if err != nil {
		return err
	}

	cb := ctx.Update.CallbackQuery

	if _, _, err = cb.Message.EditText(bot, fmt.Sprintf("–°–µ–π—á–∞—Å –≤—ã –∏–∑–≤–µ—Å—Ç–Ω—ã–º –º–Ω–µ –∫–∞–∫ %s. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à  –±–∏–ª–µ—Ç/–ø–æ—á—Ç—É/–§–ò–û (–æ–¥–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä)", user.Identification),
		&gotgbot.EditMessageTextOpts{
			ParseMode:   html,
			ReplyMarkup: backToMainMenuKB(),
		}); err != nil {
		return err
	}

	return nil
}

func (c *Client) indexHandlerCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {
	cb := ctx.Update.CallbackQuery

	if _, err := cb.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{Text: "–≠—Ç–æ –Ω–æ–º–µ—Ä –¥–æ–∫–ª–∞–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ"}); err != nil {
		return err
	}

	return nil
}

func (c *Client) viewReportsCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	err := c.FSM.SetState(context.Background(), ctx.EffectiveUser.Id, viewReports)

	if err != nil {
		return err
	}

	data, err := c.Database.SelectReports(c.Database.Collection("report"))

	if err != nil {
		return err
	}

	cb := ctx.Update.CallbackQuery

	reportsFormat := getFormatReports(data)

	reports, err := c.Database.SelectReports(c.Database.Collection("report"))

	if err != nil {

		return err
	}

	user, err := c.Database.SelectUser(c.Database.Collection("user"), int(ctx.EffectiveUser.Id))

	if err != nil {
		return err
	}

	evaluations, err := c.Database.SelectEvaluations(c.Database.Collection("evaluation"), int(cb.From.Id))

	if err != nil {
		return err
	}

	_, _, err = cb.Message.EditText(bot, fmt.Sprintf("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–∫–ª–∞–¥—ã:\n\n%s", reportsFormat), &gotgbot.EditMessageTextOpts{
		ReplyMarkup: reportsWithFavoriteKB(reports, user, evaluations),
	})

	if err != nil {
		return err
	}

	return nil

}

func (c *Client) addToFavoriteCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	reports, err := c.Database.SelectReports(c.Database.Collection("report"))

	if err != nil {
		return err
	}

	for _, report := range reports {
		if report.URL == strings.Split(cb.Data, ";")[1] {
			err = c.Database.AddUserFavReports(c.Database.Collection("user"), int(cb.From.Id), report)
			if err != nil {
				return err
			}
		}
	}

	user, err := c.Database.SelectUser(c.Database.Collection("user"), int(cb.From.Id))

	if err != nil {
		return err
	}

	evaluations, err := c.Database.SelectEvaluations(c.Database.Collection("evaluation"), int(cb.From.Id))

	if err != nil {
		return err
	}

	if _, _, err = cb.Message.EditReplyMarkup(bot, &gotgbot.EditMessageReplyMarkupOpts{ReplyMarkup: reportsWithFavoriteKB(reports, user, evaluations)}); err != nil {
		return err
	}

	if _, err = cb.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{Text: "–î–æ–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"}); err != nil {
		return err
	}

	return nil
}

func (c *Client) removeFromFavoriteCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	reports, err := c.Database.SelectReports(c.Database.Collection("report"))

	if err != nil {

		return err
	}

	for _, report := range reports {
		if report.URL == strings.Split(cb.Data, ";")[1] {
			err = c.Database.RemoveUserFavReport(c.Database.Collection("user"), int(cb.From.Id), report.URL)
			if err != nil {
				return err
			}
		}
	}

	user, err := c.Database.SelectUser(c.Database.Collection("user"), int(cb.From.Id))

	if err != nil {
		return err
	}

	evaluations, err := c.Database.SelectEvaluations(c.Database.Collection("evaluation"), int(cb.From.Id))

	if err != nil {
		return err
	}

	if _, _, err = cb.Message.EditReplyMarkup(bot, &gotgbot.EditMessageReplyMarkupOpts{ReplyMarkup: reportsWithFavoriteKB(reports, user, evaluations)}); err != nil {
		return err
	}

	if _, err = cb.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{Text: "–î–æ–∫–ª–∞–¥ —É–±—Ä–∞–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!"}); err != nil {
		return err
	}

	return nil
}

func (c *Client) threePointsCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	if _, err := cb.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{Text: "–î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"}); err != nil {

		return err
	}

	return nil
}

func (c *Client) photoHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) audioHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) videoHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) mediaGroupHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) storyHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) videoNoteHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	_, err := bot.DeleteMessage(ctx.EffectiveChat.Id, ctx.EffectiveMessage.MessageId, nil)

	if err != nil {

		return err
	}

	return nil
}

func (c *Client) notEvaluateCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	if _, err := cb.Answer(bot, &gotgbot.AnswerCallbackQueryOpts{Text: "–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫–ª–∞–¥"}); err != nil {

		return err
	}

	return nil
}

func (c *Client) evaluateReportCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	url := strings.Split(cb.Data, ";")[1]

	report, err := c.Database.SelectReport(c.Database.Collection("report"), url)
	if err != nil {
		return err
	}

	text := fmt.Sprintf("–í—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–∫–ª–∞–¥:\n\n%s - %s\n\n–ö–∞–∫—É—é –æ—Ü–µ–Ω–∫—É –≤—ã –±—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞:", report.Speakers, report.Title)
	_, _, err = cb.Message.EditText(bot, text,
		&gotgbot.EditMessageTextOpts{
			ReplyMarkup: evaluateKB(),
		})

	if err != nil {
		return err
	}

	if err = c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("evaluateReport;%s;%s", url, text)); err != nil {
		return err
	}

	return nil
}

func (c *Client) evaluationBeginCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	stateSeparated := strings.Split(state, ";")

	_, _, err = cb.Message.EditReplyMarkup(bot, &gotgbot.EditMessageReplyMarkupOpts{
		ReplyMarkup: contentKB(stateSeparated[1]),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) contentCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	markForContent := strings.Split(cb.Data, ";")[1]

	_, _, err := cb.Message.EditText(bot, "–ö–∞–∫—É—é –±—ã –æ—Ü–µ–Ω–∫—É –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", &gotgbot.EditMessageTextOpts{
		ParseMode:   html,
		ReplyMarkup: performanceKB(),
	})

	if err != nil {
		return err
	}

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	if err = c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("%s;%s", state, markForContent)); err != nil {
		return err
	}

	return nil
}

func (c *Client) backToContentCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {

	}

	stateSeparated := strings.Split(state, ";")

	if stateSeparated[0] == evaluateReport {

		if err != nil {
			return err
		}

		_, _, err = cb.Message.EditText(bot, stateSeparated[2], &gotgbot.EditMessageTextOpts{
			ChatId:      ctx.EffectiveChat.Id,
			MessageId:   ctx.EffectiveMessage.MessageId,
			ReplyMarkup: evaluateKB(),
		})

		if err != nil {
			return err
		}

		err = c.FSM.SetState(context.Background(), cb.From.Id, strings.Join(stateSeparated[:3], ";")+";")

		if err != nil {
			return err
		}

	}

	return nil
}

func (c *Client) performanceCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	markPerformance := strings.Split(cb.Data, ";")[1]

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	errS := c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("%s;%s", state, markPerformance))

	if errS != nil {
		return errS
	}

	_, _, err = cb.Message.EditText(bot, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–î–∞–ª–µ–µ\"", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: commentKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) evaluateEndNoCommentCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {
	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	stateSeparated := strings.Split(state, ";")

	evaluation := models.Evaluation{URL: stateSeparated[1], TgID: int(cb.From.Id),
		Content: stateSeparated[len(stateSeparated)-2], Performance: stateSeparated[len(stateSeparated)-1]}
	if err = c.Database.InsertOne(c.Database.Collection("evaluation"), evaluation); err != nil {
		return err
	}
	_, _, err = cb.Message.EditText(bot, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: evaluationEndKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) noWishToEvaluateCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	stateSeparated := strings.Split(state, ";")

	evaluation := models.Evaluation{URL: stateSeparated[1], TgID: int(cb.From.Id),
		Content: cb.Data}

	if err = c.Database.InsertOne(c.Database.Collection("evaluation"), evaluation); err != nil {
		return err
	}

	_, _, err = cb.Message.EditText(bot, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ü–æ–º–Ω–∏—Ç–µ: –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: evaluationEndKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) noEvaluateCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	stateSeparated := strings.Split(state, ";")

	evaluation := models.Evaluation{URL: stateSeparated[1], TgID: int(cb.From.Id),
		Content: cb.Data}

	if err = c.Database.InsertOne(c.Database.Collection("evaluation"), evaluation); err != nil {
		return err
	}

	_, _, err = cb.Message.EditText(bot, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –≤–¥—Ä—É–≥ —á—Ç–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: evaluationEndKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) userEvaluationsCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	err := c.FSM.SetState(context.Background(), cb.From.Id, userEvaluations)

	if err != nil {
		return err
	}

	evaluations, err := c.Database.SelectEvaluations(c.Database.Collection("evaluation"), int(cb.From.Id))

	var text string

	reports, err := c.Database.SelectReports(c.Database.Collection("report"))

	evaluationsMap := make(map[string]models.Evaluation, len(evaluations))

	for _, evaluation := range evaluations {
		if _, exists := evaluationsMap[evaluation.URL]; !exists {
			evaluationsMap[evaluation.URL] = evaluation
		}
	}

	if err != nil {
		return err
	}

	for ind, report := range reports {
		if _, exists := evaluationsMap[report.URL]; exists {
			text += fmt.Sprintf("%v. %s - %s\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: \"%s\"\n–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: \"%s\"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"%s\"\n\n", ind+1,
				report.Speakers, report.Title, evaluationsMap[report.URL].Content, evaluationsMap[report.URL].Performance, evaluationsMap[report.URL].Comment)
		}
	}

	_, _, err = cb.Message.EditText(bot, fmt.Sprintf("–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n%s", text), &gotgbot.EditMessageTextOpts{
		ReplyMarkup: userEvaluationsKB(reports, evaluationsMap),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) updateEvaluationCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	cbSeparated := strings.Split(cb.Data, ";")

	url := cbSeparated[1]

	report, err := c.Database.SelectReport(c.Database.Collection("report"), url)

	if err != nil {
		return err
	}

	err = c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("%s;%s", cbSeparated[0], url))

	if err != nil {
		return err
	}

	_, _, err = cb.Message.EditText(bot, fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:\n\n%s - %s", report.Speakers, report.Title), &gotgbot.EditMessageTextOpts{
		ReplyMarkup: contentUpdateKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) deleteEvaluationCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	cbSeparated := strings.Split(cb.Data, ";")

	err := c.FSM.SetState(context.Background(), cb.From.Id, cbSeparated[0])

	if err != nil {
		return err
	}

	url := cbSeparated[1]

	deleted, err := c.Database.DeleteEvaluation(c.Database.Collection("evaluation"), int(cb.From.Id), url)

	if err != nil {
		return err
	}

	if deleted {
		_, _, err = cb.Message.EditText(bot, "–í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–π—Ç–µ, —Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π", &gotgbot.EditMessageTextOpts{
			ReplyMarkup: evaluationEndKB(),
		})
		if err != nil {
			return err
		}
	}

	return nil
}

func (c *Client) updateContentCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	cbSeparated := strings.Split(cb.Data, ";")

	content := cbSeparated[1]

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	err = c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("%s;%s", state, content))

	_, _, err = cb.Message.EditText(bot, "–í–≤–µ–¥–∏ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –∑–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: performanceUpdateKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) updatePerformanceCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	cbSeparated := strings.Split(cb.Data, ";")

	content := cbSeparated[1]

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	err = c.FSM.SetState(context.Background(), cb.From.Id, fmt.Sprintf("%s;%s", state, content))

	_, _, err = cb.Message.EditText(bot, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–î–∞–ª–µ–µ\"", &gotgbot.EditMessageTextOpts{
		ReplyMarkup: commentUpdateKB(),
	})

	if err != nil {
		return err
	}

	return nil
}

func (c *Client) updateWithNoCommentCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	state, err := c.FSM.GetState(context.Background(), cb.From.Id)

	if err != nil {
		return err
	}

	stateSeparated := strings.Split(state, ";")

	evaluation := models.Evaluation{
		Content: stateSeparated[2], Performance: stateSeparated[3],
	}

	upd, err := c.Database.UpdateEvaluation(c.Database.Collection("evaluation"), int(cb.From.Id), stateSeparated[1], evaluation)

	if upd {
		_, _, err = cb.Message.EditText(bot, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", &gotgbot.EditMessageTextOpts{
			ReplyMarkup: evaluationEndKB(),
		})

		if err != nil {
			return err
		}
	} else {
		_, _, err = cb.Message.EditText(bot, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ —Ç–∞–∫–∏–µ –∂–µ –æ—Ü–µ–Ω–∫–∏", &gotgbot.EditMessageTextOpts{
			ReplyMarkup: evaluationEndKB(),
		})

		if err != nil {
			return err
		}
	}

	return nil
}

func (c *Client) checkAndNotify(bot *gotgbot.Bot) {
	ticker := time.NewTicker(15 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			err := c.notifyUpcomingReports(bot)
			if err != nil {
				fmt.Println("Error notifying users:", err)
			}
		}
	}
}

func (c *Client) notifyUpcomingReports(bot *gotgbot.Bot) error {
	reports, err := c.Database.SelectReports(c.Database.Collection("report"))
	if err != nil {
		return err
	}

	users, err := c.Database.SelectUsers(c.Database.Collection("user"))
	if err != nil {
		return err
	}

	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		return err
	}

	now := time.Now().In(location)
	for _, report := range reports {
		startTime := report.StartTime.In(location)
		if startTime.After(now) && startTime.Before(now.Add(10*time.Minute)) {
			message := fmt.Sprintf("–î–æ–∫–ª–∞–¥ \"%s\" –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.\n–°–ø–∏–∫–µ—Ä: %s\n–ù–∞—á–∞–ª–æ –≤ %s", report.Title, report.Speakers, startTime.Format("15:04"))
			for _, user := range users {
				_, err := bot.SendMessage(int64(user.TgID), message, nil)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

func (c *Client) downloadReviewsCBHandler(bot *gotgbot.Bot, ctx *ext.Context) error {

	cb := ctx.Update.CallbackQuery

	reports, err := c.Database.SelectReports(c.Database.Collection("report"))

	if err != nil {
		return err
	}

	evaluations, err := c.Database.SelectAllEvaluations(c.Database.Collection("evaluation"))

	if err != nil {
		return err
	}

	evaluationsMap := make(map[string]models.Evaluation, len(evaluations))

	for _, evaluation := range evaluations {
		if _, exists := evaluationsMap[evaluation.URL]; !exists {
			evaluationsMap[evaluation.URL] = evaluation
		}
	}

	var actualEvaluations []models.Evaluation

	for _, report := range reports {
		if evaluation, exists := evaluationsMap[report.URL]; exists {
			actualEvaluations = append(actualEvaluations, evaluation)
		}
	}

	jsonData, err := json.Marshal(actualEvaluations)

	if err != nil {
		return err
	}

	file, err := os.Create(dataJSON)

	if err != nil {
		return err
	}

	_, err = file.Write(jsonData)

	if err != nil {
		return err
	}

	err = file.Close()

	if err != nil {
		return err
	}

	file, err = os.Open(dataJSON)

	if err != nil {
		return err
	}

	defer func() {
		err = os.Remove(file.Name())
		if err != nil {
			fmt.Println(err)
		}
	}()
	var wg sync.WaitGroup
	msg, err := bot.SendDocument(cb.From.Id, file, &gotgbot.SendDocumentOpts{Caption: "–û—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–æ–∫–ª–∞–¥–æ–≤"})

	if err != nil {
		return err
	}
	wg.Add(1)
	go func() {
		defer wg.Done()
		time.Sleep(60 * time.Second)
		_, err = bot.DeleteMessage(msg.Chat.Id, msg.MessageId, nil)
		if err != nil {
			fmt.Println(err)
		}
	}()

	wg.Wait()
	return nil
}
